---
- name: PowerDNS installation
  become: yes
  hosts: powerdns
  tasks:
    - name: install mysql from remote repo
      yum: 
        name: https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm
        state: present
    - name: import GPG key
      ansible.builtin.rpm_key:
        state: present
        key: https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
    - name: install mysql package
      yum:
        name: mysql-community-server
        state: present
    - name: install mysql python
      yum:
        name: MySQL-python
        state: present
    - name: setting mysql service on levels 2,3,5
      ansible.builtin.service:
        name: mysqld
        state: started
        enabled: yes
    - name: Changing Auth methods
      lineinfile: 
        path: /etc/my.cnf
        line: 'default-authentication-plugin=mysql_native_password'
        insertbefore: datadir=/var/lib/mysql*
      register: trigger
    - name: restart mysql service
      ansible.builtin.service:
        name: mysqld
        state: restarted
    - name: get temp root password
      shell: "grep 'A temporary password is generated for root@localhost' /var/log/mysqld.log | awk -F ' ' '{print $(NF)}' | tail -1"
      register: root_password
      when: trigger.changed
    - name: allow for sql login
      ansible.builtin.command: mysql --user root --password={{ root_password.stdout }} --connect-expired-password --execute="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ root_password.stdout }}';"
      when: trigger.changed  
    - name: update expired root password
      ansible.builtin.command: mysql --user root --password={{ root_password.stdout }} --connect-expired-password --execute="ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_root_password }}';"
      when: trigger.changed
    - name: install from remote repo
      yum:
        name: epel-release
        state: present
    - name: install pdns and yum utils
      yum:
        name:
          - pdns
          - yum-utils
          - pdns-backend-mysql
        state: present
    - name: creating root with creds for database 
      template:
        src: my.cnf.j2
        dest: /root/.my.cnf
        owner: root 
        mode: 0600
    - name: restart mysql
      ansible.builtin.service:
        name: mysqld
        state: restarted
    - name: creating database for powerdns
      mysql_db:
        login_unix_socket: /var/lib/mysql/mysql.sock
        login_password: "{{ mysql_root_password }}"
        login_user: root
        name: powerdns
    - name: creating pdns mysql user
      mysql_user: 
        login_unix_socket: /var/lib/mysql/mysql.sock
        login_password: "{{ mysql_root_password }}"
        login_user: root
        name: pdns
        password: "{{ pdns_password }}"
        state: present
    - name: copying database file over
      copy:
        src: domains.sql
        dest: /tmp/domains.sql
      register: domain_sql_db
    - name: copying databse file over
      copy: 
        src: name_index.sql
        dest: /tmp/name_index.sql
      register: index_sql
    - name: importing into database
      mysql_db:
        login_unix_socket: /var/lib/mysql/mysql.sock
        login_password: "{{ mysql_root_password }}"
        login_user: root
        name: powerdns 
        state: import
        target: /tmp/domains.sql
      when: domain_sql_db.changed
    - name: creating index on domains 
      mysql_db:
        login_unix_socket: /var/lib/mysql/mysql.sock
        login_password: "{{ mysql_root_password }}"
        login_user: root
        name: powerdns
        state: import
        target: /tmp/name_index.sql
      when: index_sql.changed
    - name: copying sql files dir
      copy:
        src: /etc/ansible/sqlfiles
        dest: /tmp
      register: dir_copy
    - name: import the files into sql 
      mysql_db: 
        login_unix_socket: /var/lib/mysql/mysql.sock
        login_password: "{{ mysql_root_password }}"
        login_user: root
        name: powerdns
        state: import
        target: /tmp/sqlfiles/records.sql
      when: dir_copy.changed
    - name: import again 
      mysql_db:
        login_unix_socket: /var/lib/mysql/mysql.sock
        login_password: "{{ mysql_root_password }}"
        login_user: root
        name: powerdns
        state: import
        target: /tmp/sqlfiles/supermasters.sql
      when: dir_copy.changed
    - name: remove current pdns launch type
      lineinfile:
        path: /etc/pdns/pdns.conf
        regexp: '^%launch=bind'
        state: absent
      register: pdns_config
    - name: configure pdns file
      blockinfile: 
        path: /etc/pdns/pdns.conf
        marker: "##ansible managed configuration"
        insertafter: "launch which backends"
        block: | 
          launch=gmysql
          gmysql-host=localhost
          gmysql-user=power_admin
          gmysql-password={{ mysql_root_password }}
          gmysql-dbname=powerdns
      when: pdns_config.changed
    - name: setting pdns service 
      ansible.builtin.service:
        name: pdns
        enabled: yes
        state: started
    - name: enable php 7 repo
      yum:
        name: http://rpms.remirepo.net/enterprise/remi-release-7.rpm
        state: present
    - name: enabling php 7 
      ansible.builtin.command: yum-config-manager --enable remi-php73 
    - name: installing poweradmin 
      #enablerepo: remi-php73
      yum:
        name:
          - httpd
          - php #this might have to be php73 for centos
          - php-common #this is just needed for amazon linux 
          - php-devel
          - php-gd
          - php-imap
          - php-ldap
          - php-mysql
          - php-odbc
          - php-pear
          - php-xml
          - php-xmlrpc
          - php-mbstring
          - php-mcrypt
          - php-mhash
          - gettext
        state: latest
    - name: setting httpd to start 
      ansible.builtin.service:
        name: httpd
        enabled: yes
        state: started
    - name: installing pear packages
      yum:
        name:
          - php-pear-DB
          - php-pear-MDB2-Driver-mysqli
        skip_broken: yes
    - name: creating directory for poweradmin
      copy:
        src: /etc/ansible/poweradmin-2.2.1/
        dest: /var/www/html/poweradmin/


